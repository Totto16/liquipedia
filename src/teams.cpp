
#include <teams.hpp>

Tournament get_current_tournament() {

	// AUTO GENERATED BY TS (JS)

	PointsObject points = PointsObject{};

	points.insert_or_assign(static_cast<Place>(0), static_cast<Points>(650));
	points.insert_or_assign(static_cast<Place>(1), static_cast<Points>(550));
	points.insert_or_assign(static_cast<Place>(2), static_cast<Points>(450));
	points.insert_or_assign(static_cast<Place>(3), static_cast<Points>(400));
	points.insert_or_assign(static_cast<Place>(4), static_cast<Points>(350));
	points.insert_or_assign(static_cast<Place>(5), static_cast<Points>(300));
	points.insert_or_assign(static_cast<Place>(6), static_cast<Points>(250));
	points.insert_or_assign(static_cast<Place>(7), static_cast<Points>(220));
	points.insert_or_assign(static_cast<Place>(8), static_cast<Points>(200));
	points.insert_or_assign(static_cast<Place>(9), static_cast<Points>(180));
	points.insert_or_assign(static_cast<Place>(10), static_cast<Points>(150));
	points.insert_or_assign(static_cast<Place>(11), static_cast<Points>(120));
	points.insert_or_assign(static_cast<Place>(12), static_cast<Points>(100));
	points.insert_or_assign(static_cast<Place>(13), static_cast<Points>(70));
	points.insert_or_assign(static_cast<Place>(14), static_cast<Points>(50));
	points.insert_or_assign(static_cast<Place>(15), static_cast<Points>(20));

	std::string name = "PGS2 Qualifier";

	Tournament tournament = { name, points };

	return tournament;

	// AUTO GENERATED BY TS (JS)
}

// constexpr uint8_t AMOUNT = 27;

std::array<Team<4>, AMOUNT> get_current_teams() {
	// AUTO GENERATED BY TS (JS)
	std::array<Team<4>, AMOUNT> teams{};

	std::array<TeamPlace, 4> places_0{};

	places_0[0] = 1;

	places_0[1] = 6;

	places_0[2] = 16;

	places_0[3] = 17;

	const Team<4> team_0 = Team<4>{ "HOWL Esports", places_0, 1050, 1 };
	teams[0] = team_0;

	std::array<TeamPlace, 4> places_1{};

	places_1[0] = 4;

	places_1[1] = 2;

	places_1[2] = 16;

	places_1[3] = 17;

	const Team<4> team_1 = Team<4>{ "FUT Esports", places_1, 1000, 2 };
	teams[1] = team_1;

	std::array<TeamPlace, 4> places_2{};

	places_2[0] = 3;

	places_2[1] = 3;

	places_2[2] = 16;

	places_2[3] = 17;

	const Team<4> team_2 = Team<4>{ "Exalt", places_2, 1000, 3 };
	teams[2] = team_2;

	std::array<TeamPlace, 4> places_3{};

	places_3[0] = 8;

	places_3[1] = 1;

	places_3[2] = 16;

	places_3[3] = 17;

	const Team<4> team_3 = Team<4>{ "Twisted Minds", places_3, 900, 4 };
	teams[3] = team_3;

	std::array<TeamPlace, 4> places_4{};

	places_4[0] = 2;

	places_4[1] = 8;

	places_4[2] = 16;

	places_4[3] = 17;

	const Team<4> team_4 = Team<4>{ "Acend", places_4, 850, 5 };
	teams[4] = team_4;

	std::array<TeamPlace, 4> places_5{};

	places_5[0] = 5;

	places_5[1] = 10;

	places_5[2] = 16;

	places_5[3] = 17;

	const Team<4> team_5 = Team<4>{ "FaZe Clan", places_5, 550, 6 };
	teams[5] = team_5;

	std::array<TeamPlace, 4> places_6{};

	places_6[0] = 15;

	places_6[1] = 4;

	places_6[2] = 16;

	places_6[3] = 17;

	const Team<4> team_6 = Team<4>{ "Digital Athletics", places_6, 440, 7 };
	teams[6] = team_6;

	std::array<TeamPlace, 4> places_7{};

	places_7[0] = 17;

	places_7[1] = 5;

	places_7[2] = 16;

	places_7[3] = 17;

	const Team<4> team_7 = Team<4>{ "Entropiq", places_7, 350, 8 };
	teams[7] = team_7;

	std::array<TeamPlace, 4> places_8{};

	places_8[0] = 6;

	places_8[1] = 17;

	places_8[2] = 17;

	places_8[3] = 17;

	const Team<4> team_8 = Team<4>{ "PolishPower", places_8, 350, 9 };
	teams[8] = team_8;

	std::array<TeamPlace, 4> places_9{};

	places_9[0] = 7;

	places_9[1] = 17;

	places_9[2] = 16;

	places_9[3] = 17;

	const Team<4> team_9 = Team<4>{ "Natus Vincere", places_9, 300, 10 };
	teams[9] = team_9;

	std::array<TeamPlace, 4> places_10{};

	places_10[0] = 17;

	places_10[1] = 7;

	places_10[2] = 17;

	places_10[3] = 17;

	const Team<4> team_10 = Team<4>{ "Pod samolet", places_10, 250, 11 };
	teams[10] = team_10;

	std::array<TeamPlace, 4> places_11{};

	places_11[0] = 10;

	places_11[1] = 11;

	places_11[2] = 17;

	places_11[3] = 17;

	const Team<4> team_11 = Team<4>{ "BBL Esports", places_11, 250, 12 };
	teams[11] = team_11;

	std::array<TeamPlace, 4> places_12{};

	places_12[0] = 9;

	places_12[1] = 17;

	places_12[2] = 17;

	places_12[3] = 17;

	const Team<4> team_12 = Team<4>{ "DiNG", places_12, 200, 13 };
	teams[12] = team_12;

	std::array<TeamPlace, 4> places_13{};

	places_13[0] = 17;

	places_13[1] = 9;

	places_13[2] = 17;

	places_13[3] = 17;

	const Team<4> team_13 = Team<4>{ "winordie", places_13, 180, 14 };
	teams[13] = team_13;

	std::array<TeamPlace, 4> places_14{};

	places_14[0] = 11;

	places_14[1] = 17;

	places_14[2] = 16;

	places_14[3] = 17;

	const Team<4> team_14 = Team<4>{ "the Woo", places_14, 120, 15 };
	teams[14] = team_14;

	std::array<TeamPlace, 4> places_15{};

	places_15[0] = 12;

	places_15[1] = 17;

	places_15[2] = 16;

	places_15[3] = 17;

	const Team<4> team_15 = Team<4>{ "Sarvem Esports", places_15, 100, 16 };
	teams[15] = team_15;

	std::array<TeamPlace, 4> places_16{};

	places_16[0] = 13;

	places_16[1] = 17;

	places_16[2] = 16;

	places_16[3] = 17;

	const Team<4> team_16 = Team<4>{ "Question Mark", places_16, 80, 17 };
	teams[16] = team_16;

	std::array<TeamPlace, 4> places_17{};

	places_17[0] = 17;

	places_17[1] = 13;

	places_17[2] = 16;

	places_17[3] = 17;

	const Team<4> team_17 = Team<4>{ "AfterAlt", places_17, 60, 18 };
	teams[17] = team_17;

	std::array<TeamPlace, 4> places_18{};

	places_18[0] = 17;

	places_18[1] = 12;

	places_18[2] = 17;

	places_18[3] = 17;

	const Team<4> team_18 = Team<4>{ "0rgless", places_18, 80, 19 };
	teams[18] = team_18;

	std::array<TeamPlace, 4> places_19{};

	places_19[0] = 14;

	places_19[1] = 17;

	places_19[2] = 17;

	places_19[3] = 17;

	const Team<4> team_19 = Team<4>{ "MForce", places_19, 60, 20 };
	teams[19] = team_19;

	std::array<TeamPlace, 4> places_20{};

	places_20[0] = 17;

	places_20[1] = 14;

	places_20[2] = 17;

	places_20[3] = 17;

	const Team<4> team_20 = Team<4>{ "Bitfix Gaming", places_20, 40, 21 };
	teams[20] = team_20;

	std::array<TeamPlace, 4> places_21{};

	places_21[0] = 17;

	places_21[1] = 17;

	places_21[2] = 16;

	places_21[3] = 17;

	const Team<4> team_21 = Team<4>{ "EXhalatioN", places_21, 0, 22 };
	teams[21] = team_21;

	std::array<TeamPlace, 4> places_22{};

	places_22[0] = 17;

	places_22[1] = 17;

	places_22[2] = 16;

	places_22[3] = 17;

	const Team<4> team_22 = Team<4>{ "Monarch Esports", places_22, 0, 23 };
	teams[22] = team_22;

	std::array<TeamPlace, 4> places_23{};

	places_23[0] = 17;

	places_23[1] = 17;

	places_23[2] = 16;

	places_23[3] = 17;

	const Team<4> team_23 = Team<4>{ "Yeppa Esports", places_23, 0, 24 };
	teams[23] = team_23;

	std::array<TeamPlace, 4> places_24{};

	places_24[0] = 17;

	places_24[1] = 15;

	places_24[2] = 17;

	places_24[3] = 17;

	const Team<4> team_24 = Team<4>{ "100 ADR", places_24, 20, 25 };
	teams[24] = team_24;

	std::array<TeamPlace, 4> places_25{};

	places_25[0] = 16;

	places_25[1] = 17;

	places_25[2] = 17;

	places_25[3] = 17;

	const Team<4> team_25 = Team<4>{ "FULLTILT", places_25, 20, 26 };
	teams[25] = team_25;

	std::array<TeamPlace, 4> places_26{};

	places_26[0] = 17;

	places_26[1] = 16;

	places_26[2] = 17;

	places_26[3] = 17;

	const Team<4> team_26 = Team<4>{ "Push and Shoot", places_26, 10, 27 };
	teams[26] = team_26;

	return teams;
	// AUTO GENERATED BY TS (JS)
}

// NOT Auto generated

std::array<Team<4>, 16> get_participating_teams(uint8_t alreadyPlayedTournaments) {
	const std::array<Team<4>, AMOUNT> teams = get_current_teams();

	std::array<Team<4>, 16> participating_teams{};
	uint8_t index = 0;
	for(uint8_t i = 0; i < teams.size(); ++i) {
		if(teams[i].places[alreadyPlayedTournaments] > 16) {
			continue;
		}
		participating_teams[index] = teams[i];
		++index;
	}

	if(index != 16) {
		throw std::runtime_error(
		    "Error in retrieving the participating_teams: this is likely a parser error!");
	}

	return participating_teams;
}
